{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["formatXTick","ts","console","log","ms","Date","now","CustomTooltip","active","payload","label","className","long","value","App","useSWR","rawData","data","error","sorted","pingtimes","forEach","point","servicename","push","timestamp","Number","duration","ResponsiveContainer","height","width","LineChart","YAxis","unit","XAxis","tickFormatter","type","domain","tickCount","tickLine","axisLine","dataKey","Line","stroke","strokeWidth","dot","isAnimationActive","Tooltip","content","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","fetcher","fetch","res","json","document","getElementById"],"mappings":"6RAoEA,SAASA,EAAYC,GAEjB,OADAC,QAAQC,IAAIF,GACLG,IAAGH,EAAKI,KAAKC,OAGxB,IAAMC,EAAgB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACtC,OAAIF,EAEI,sBAAKG,UAAU,iBAAf,UACI,mBAAGA,UAAU,QAAb,SACKP,IAAGM,EAAOL,KAAKC,MAAO,CAAEM,MAAM,MAEnC,mBAAGD,UAAU,OAAb,SAAmC,MAAdF,EAAQ,GAAaA,EAAQ,GAAGI,MAAQ,KAAO,YAIzE,MAGIC,EAhFf,WACI,MAAsCC,YAAO,gBAAjCC,EAAZ,EAAMC,KAAsBC,EAA5B,EAAqBA,MAErB,GAAIA,EAEA,OADAhB,QAAQgB,MAAMA,GAEV,sBAAKP,UAAU,MAAf,UACI,wCACA,sDAIZ,IAAKK,EACD,OACI,sBAAKL,UAAU,MAAf,UACI,wCACA,2DAIZ,IAAIQ,EAAS,GACTC,EAAY,GAahB,OAZAJ,EAAQK,SAAQ,SAAAC,GACqB,MAA7BH,EAAOG,EAAMC,eACbJ,EAAOG,EAAMC,aAAe,GAC5BH,EAAUE,EAAMC,aAAe,IAEnCJ,EAAOG,EAAMC,aAAaC,KAAKF,GAC/BF,EAAUE,EAAMC,aAAaC,KAAK,CAAEC,UAAWC,OAAO,IAAIrB,KAAKiB,EAAMG,YAAaE,SAAUL,EAAMK,SAAW,EAAIL,EAAMK,SAAW,UAEtIzB,QAAQC,IAAIgB,GACZjB,QAAQC,IAAIiB,EAAS,QAIjB,sBAAKT,UAAU,MAAf,UACI,gDACA,cAACiB,EAAA,EAAD,CAAqBC,OAAQ,IAAKC,MAAM,MAAxC,SACI,eAACC,EAAA,EAAD,CAAWd,KAAMG,EAAS,OAA1B,UACI,cAACY,EAAA,EAAD,CACIC,KAAK,KACLH,MAAO,KAEX,cAACI,EAAA,EAAD,CACIC,cAAenC,EACfoC,KAAK,SACLC,OAAQ,CAAC,UAAW,WACpBC,UAAa,EACbC,UAAU,EACVC,UAAU,EACVC,QAAQ,cAEZ,cAACC,EAAA,EAAD,CAAMN,KAAK,WAAWK,QAAQ,WAAWE,OAAO,UAAUC,YAAa,EAAGC,KAAK,EAAOC,mBAAmB,IACzG,cAACC,EAAA,EAAD,CAASC,QAASzC,EAAe0C,QAAQ,aChD9CC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAWhD,MAAO,CAAEiD,QAJZ,kBAAaC,MAAK,WAAL,aAAeV,MAAK,SAACW,GAAD,OAASA,EAAIC,YAItD,SACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5BjB,M","file":"static/js/main.fe97ed1d.chunk.js","sourcesContent":["import { DateTime } from \"luxon\";\nimport { PureComponent } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport useSWR from \"swr\";\nimport \"./App.css\";\nimport ms from \"ms\";\n\nfunction App() {\n    let { data: rawData, error: error } = useSWR(\"/api/v1/hour\");\n\n    if (error) {\n        console.error(error);\n        return (\n            <div className=\"App\">\n                <h1>Retina</h1>\n                <h2>An error occurred</h2>\n            </div>\n        );\n    }\n    if (!rawData)\n        return (\n            <div className=\"App\">\n                <h1>Retina</h1>\n                <h2>Loading latest data...</h2>\n            </div>\n        );\n\n    var sorted = {}\n    var pingtimes = {}\n    rawData.forEach(point => {\n        if (sorted[point.servicename] == null) {\n            sorted[point.servicename] = []\n            pingtimes[point.servicename] = []\n        }\n        sorted[point.servicename].push(point)\n        pingtimes[point.servicename].push({ timestamp: Number(new Date(point.timestamp)), duration: point.duration > 0 ? point.duration : null })\n    });\n    console.log(sorted)\n    console.log(pingtimes[\"google\"])\n\n\n    return (\n        <div className=\"App\">\n            <h1>bad graph time</h1>\n            <ResponsiveContainer height={250} width=\"80%\">\n                <LineChart data={pingtimes[\"google\"]}>\n                    <YAxis\n                        unit=\"ms\"\n                        width={80}\n                    />\n                    <XAxis\n                        tickFormatter={formatXTick}\n                        type=\"number\"\n                        domain={['dataMin', 'dataMax']} \n                        tickCount = {5}\n                        tickLine={false}\n                        axisLine={true}\n                        dataKey=\"timestamp\"\n                    />\n                    <Line type=\"monotone\" dataKey=\"duration\" stroke=\"#8884d8\" strokeWidth={2} dot={false} isAnimationActive={false} />\n                    <Tooltip content={CustomTooltip} cursor={false} />\n                </LineChart>\n            </ResponsiveContainer>\n\n        </div>\n    );\n}\n\nfunction formatXTick(ts) {\n    console.log(ts)\n    return ms(ts - Date.now())\n}\n\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (active) {\n        return (\n            <div className=\"custom-tooltip\">\n                <p className=\"label\">\n                    {ms(label- Date.now(), { long: true })}\n                </p>\n                <p className=\"desc\">{payload[0] != null ? payload[0].value + \"ms\" : \"down\"}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { SWRConfig } from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json());\n\nReactDOM.render(\n    <React.StrictMode>\n        <SWRConfig value={{ fetcher }}>\n            <App />\n        </SWRConfig>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}